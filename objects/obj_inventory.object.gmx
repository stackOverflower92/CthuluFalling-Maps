<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set variables
// Boolean to trigger inventory (show or not)
globalvar show_inventory;
show_inventory = false;

// Max number of items in the inventory
globalvar max_items;
max_items = 5;

// list containing all the objects in the inventory
globalvar inventory_items;
inventory_items = ds_list_create();

// List containing all weapons in the inventory
globalvar inventory_weapons;
inventory_weapons = ds_list_create();

// DEBUG: add stuff to inventory
ds_list_add(inventory_items, obj_torch);
ds_list_add(inventory_weapons, obj_shotgun);

// Set depth to avoid lights affection on self
if (instance_exists(obj_lightController))
   depth = obj_lightController.depth - 1;
   
// Set parameters for drawing
// Pixels between items and weapons
spacing_between = 10;

// Height of inventory background
height = 80;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Toggle inventory
key_press = keyboard_check_pressed(ord("I"));

if (key_press) show_inventory = not show_inventory;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw inventory
if (show_inventory) {
   // Coordinates
   var x1, x2, y1, y2;
   var x12, x22, y12, y22;
   
   // Items inventory
   x1 = view_xview[0];
   x2 = x1 + view_wview[0];
   y1 = view_yview[0];
   y2 = y1 + height;
   
   // Weapons inventory
   x12 = view_xview[0];
   x22 = x12 + view_wview[0];
   y12 = view_yview[0] + height + spacing_between;
   y22 = y12 + height;
   
   // Draw settings
   draw_set_color(c_black);
   draw_set_alpha(0.8);
   draw_rectangle(x1, y1, x2, y2, 0);
   draw_rectangle(x12, y12, x22, y22, 0);
   draw_set_alpha(1);
   
   // Draw items
   for (i = 0; i &lt; ds_list_size(inventory_items); i++) {
       // Draw border
       draw_sprite(spr_inventoryItemBorder, 0, x1 + sprite_get_width(spr_inventoryItemBorder) + (i * 40), y2 - sprite_get_height(spr_inventoryItemBorder));
       
       // Get current item
       current_item = ds_list_find_value(inventory_items, i);
       
       // Draw current item sprite
       draw_sprite(
                   object_get_sprite(current_item),
                   0, 
                   x1 + 24 + (i * 40) + sprite_get_width(spr_inventoryItemBorder) / 2,
                   y2 - 24 + sprite_get_height(spr_inventoryItemBorder) / 2
       );
   }
   
   // Draw weapons
   for (i = 0; i &lt; ds_list_size(inventory_weapons); i++) {
       // Draw border
       draw_sprite(spr_inventoryItemBorder, 0, x12 + sprite_get_width(spr_inventoryItemBorder) + (i * 40), y22 - sprite_get_height(spr_inventoryItemBorder));
       
       // Get current weapon
       current_item = ds_list_find_value(inventory_weapons, i);
       
       // Draw current weapon sprite
       draw_sprite(
                   object_get_sprite(current_item),
                   0, 
                   x12 + 24 + (i * 40) + sprite_get_width(spr_inventoryItemBorder) / 2,
                   y22 - 24 + sprite_get_height(spr_inventoryItemBorder) / 2
       );
   }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
