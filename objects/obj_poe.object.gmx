<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_poeRight</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init light
sprite = spr_glr_light_mask_point;
light = glr_light_create(sprite, 0, x, y, c_white, 0.1);
glr_light_set_shadow_strength(light, 0.8);
glr_light_set_layer(light, 0);

// effects
dec_value = 0;
dec_factor = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var x_to, y_to;
var dist;
// Check the closest object colliding with line between player and mouse
var o_id = collision_line_first(obj_player.x, obj_player.y, mouse_x, mouse_y, obj_environmentItem, false, true);

if (o_id == noone) {
   dist = distance_to_point(mouse_x, mouse_y);
} else {
   dist = distance_to_point(o_id.x, o_id.y);
}

move_towards_point(mouse_x, mouse_y, 0);

x_to = obj_player.x + lengthdir_x(min(150, dist), direction);
y_to = obj_player.y + lengthdir_y(min(150, dist), direction);

x += (x_to - x) / 20;
y += (y_to - y) / 20;

//view_xview[0] = x - (view_wview[0] / 2);
//view_yview[0] = y - (view_hview[0] / 2);

with (obj_player) camera_movement();

hsp = sprite_width;
vsp = sprite_height;

glr_light_set_position(light, x, y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
