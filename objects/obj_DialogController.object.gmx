<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set all variables
//Screen variables
VIEWPORT_WIDTH = window_get_width();
VIEWPORT_HEIGHT = window_get_height();
DEVICE_SCREEN_WIDTH = display_get_width();
DEVICE_SCREEN_HEIGHT = display_get_height();
VIEWPORT_X = view_xview[0];
VIEWPORT_Y = view_yview[0];

//sentence to display
sentence_display = "initial";
trigger_string = "initial";
speaker_name = "Thomas Turbato";

//Default speaker coords to display something while talking
speaker_obj_x = -1;
speaker_obj_y = -1;
speaker_obj = -1; //Unique real number representing every object in GM

//Backup strings
backup_string = sentence_display;

//boolean to allow drawing
can_draw_box = true;
can_type = true;
can_draw_sentence = true;

//type of the box (floating / below)
box_type = "below"; //none == default | not chosen

//array to store pages
pages_array[0] = "";
pages_array_count = 0;

//number of effective pages
n_pages = 1;
typed_letters = 0;

//user permission
user_permitted = false;
user_permitted_last = false;

//number of total chars printed since the beginning
n_chars_printed_total = 0;
n_pages_drawn = 1;

//Coords
string_x = 300;
string_y = 300;
rect_w = VIEWPORT_WIDTH * 0.7;
rect_h = VIEWPORT_WIDTH * 0.1;
chars_to_add = -1;
triggered = false;
not_executed_yet = true;
string_len = -1;
is_last_page = false;
waiting_page_continue = false;
chars_offset = 0.3;

//number of chars per row
n_chars_row = oltd_define_sentence_length(sentence_display, rect_w);

//number of rows per page
n_rows_page = oltd_define_rows_per_page(n_chars_row, rect_w, rect_h, sentence_display);

//number of chars per page
n_chars_page = n_rows_page * n_chars_row;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Event
var begin_count = 0;
VIEWPORT_X = view_xview[0];
VIEWPORT_Y = view_yview[0];

//Rect 1
var p1x = VIEWPORT_X + (VIEWPORT_WIDTH * 0.5 - rect_w * 0.5);
var p1y = VIEWPORT_Y + (VIEWPORT_HEIGHT - rect_h - VIEWPORT_HEIGHT * 0.03);
var p2x = p1x + rect_w;
var p2y = p1y + rect_h;

//Rect 2
var p1x_2 = p1x - 1;
var p1y_2 = p1y - 1;
var p2x_2 = p2x + 1;
var p2y_2 = p2y + 1;

//Speaker rect dimensions
draw_set_font(fnt_minecraftia);
var srect_h = string_height("a") + 2;
draw_set_font(fnt_minecraftia);
var srect_w = string_width(speaker_name);

//Speaker rect 1
var p1x_s = p1x;
var p1y_s = p1y - srect_h;
var p2x_s = p1x_s + srect_w;
var p2y_s = p1y;

//Speaker rect 2
var p1x_s2 = p1x_s - 1;
var p1y_s2 = p1y_s - 1;
var p2x_s2 = p2x_s + 1;
var p2y_s2 = p2y_s;

//Immediately check box dimension. if it's smaller than a char (width and height) give an error and fuck everything up
if (rect_h &lt; string_height("a") || rect_w &lt; string_width("a")){
    show_message("Dialog box dimensions are smaller than a character (current font dimension: " + string(string_width("a")) + " x " + string(string_height("a")) + ").#Did you just smoke weed or sniffed some meth today?");
    return -1;
}

//At this fucking point I have my initial string turned
//into a formatted string, so I just have to print stuff

if (sentence_display != trigger_string){
    if (not_executed_yet){
        sentence_display = oltd_insert_sharps(sentence_display, n_chars_row, n_chars_page);
        triggered = true;
        not_executed_yet = false;
        string_len = string_length(sentence_display);
    }  
}

//********************************TRIGGERING********************************
if (triggered){
    //Always put something above current speaker so the player knows better who is talking
    if (object_exists(speaker_obj)){
        draw_set_font(fnt_minecraftia);
        draw_set_color(c_red);
        draw_text(speaker_obj.x - string_width("a"), speaker_obj.y - 1.8 * string_height("a"), "!");
    }

    //It means something triggered this script and so we display everything
    if (can_draw_box == true){
        //Draw the current rectangle
        draw_rectangle_color(p1x, p1y, p2x, p2y, c_gray, c_gray, c_dkgray, c_dkgray, false);
        draw_rectangle_color(p1x_2, p1y_2, p2x_2, p2y_2, c_maroon, c_maroon, c_maroon, c_maroon, true);
        
        //Draw speaker rectangle
        draw_rectangle_color(p1x_s, p1y_s, p2x_s, p2y_s, c_gray, c_gray, c_dkgray, c_dkgray, false);
        draw_rectangle_color(p1x_s2, p1y_s2, p2x_s2, p2y_s2, c_maroon, c_maroon, c_maroon, c_maroon, true);     
        
        //Draw speaker name into speaker rectangle
        draw_set_color(c_yellow);
        draw_text(p1x_s, p1y_s, speaker_name); 
        draw_set_color(c_black);
    }
    
    //If I can add chars to the sentence
    if (can_type == true){
        //Let's change the value of the chars to add
        chars_to_add += chars_offset;
        show_debug_message("chars_to_add = " + string(ceil(chars_to_add)) + " string_length = " + string(string_length(sentence_display)));
    }
    else{
        //don't type anything
        chars_to_add += 0;
    }
    
    //If I can draw the sentence
    if (can_draw_sentence == true){
        draw_rectangle_color(p1x, p1y, p2x, p2y, c_gray, c_gray, c_dkgray, c_dkgray, false);
        draw_rectangle_color(p1x_2, p1y_2, p2x_2, p2y_2, c_maroon, c_maroon, c_maroon, c_maroon, true);    
    }
    
    //********************************DRAWING ENGINE*****************************
    if (can_draw_sentence == true){
        current_string = string_copy(sentence_display, 0, ceil(chars_to_add));
        
        //Set proper font to draw stuff
        draw_set_font(fnt_minecraftia);
        draw_text(p1x + 4, p1y + 4, current_string);    
    }
    
    //Enter following before reaching end of current page
    //This is used to wait user for input before proceeding to next page
    if (ceil(chars_to_add) == n_chars_page - 2){
        can_type = false;
        chars_offset = 0.3;
        waiting_page_continue = true;
    }
    
    //Enter following if reached end of this page
    if (ceil(chars_to_add) == n_chars_page - 1){
        //Shorten the sentence to display it correctly
        chars_n = string_length(sentence_display) - ceil(chars_to_add);
        sentence_display = string_copy(sentence_display, ceil(chars_to_add) + 1, chars_n);
        
        //Reset chars to add so it will display everything from the remaining part towards the end
        chars_to_add = 0;  
        n_pages++;
    }
    
    //Enter following if game is waiting for the user to continue to next page
    if (waiting_page_continue){
        //Enter following if game loop is waiting for user to press enter to continue
        if (keyboard_check_pressed(vk_enter)){
            can_type = true;
            waiting_page_continue = false;
        }
        
        //Draw arrow as a hint
        draw_set_font(fnt_minecraftia);
        draw_text(p2x + 5, p2y - string_height("&gt;"), "&gt;");
    }
    
    //If length of remaining sentence is less than stop limit, than complete the sentence in a quick way
    if (ceil(chars_to_add) &lt; n_chars_page - 2){
        //If enter is pressed then complete current page
        if (keyboard_check_pressed(vk_enter)){
            chars_offset = 1;
        }
    }
    
    //If lenght of remaining sentence is less than max chars per page then I am in the last page
    if (string_length(sentence_display) &lt;= n_chars_page){
        is_last_page = true;
        
        if (ceil(chars_to_add) == string_length(sentence_display)){
            //Stop typing
            can_type = false;
            
            if (keyboard_check_pressed(vk_enter)){                
                //Restore initial string using backup string
                sentence_display = backup_string;
                trigger_string = backup_string;
                
                oltd_restore();
                
                //Restore trigger
                triggered = false;
            }
        }
    }
    
    //checking the user for continue
    if (keyboard_check(vk_space)){
        user_permitted = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
